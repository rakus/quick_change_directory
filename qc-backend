#!/usr/bin/env bash
#
# FILE: qc-backend
#
# ABSTRACT: Selects a directory by pattern from the index
#
# AUTHOR: Ralf Schandl
#

qc_version=2.0

# Directory for qc index files
[ -z "${QC_DIR:-}" ] && QC_DIR=$HOME/.qc

# Manual index file storing directory names and bookmarked directories. This
# file is managed using the command 'dstore'.
QC_DSTORE_INDEX=$QC_DIR/index.dstore

# error on unset variable
set -u

# enable extended globbing
shopt -s extglob nullglob

show_help()
{
    echo "Quick Change -- index based directory changer"
    echo ""
    echo "Usage:"
    echo "  qc [OPTION]... <dir-pattern>"
    echo "      Search for dir in index and cd to it."
    echo "      -i  Search case-insensitive (slower)."
    echo "      -h  Also search indexes of hidden dirs."
    echo "      -H  Only search indexes of hidden dirs."
    echo "      -e  Also search extended indexes."
    echo "      -E  Only search extended indexes."
    echo "      -a  Search all indexes."
    echo "      dir-pattern:"
    echo "          'Documents/Adm' searches for '**/Documents/Adm*'"
    echo "          'Doc Adm' searches for '**/Doc*/Adm*'"
    echo "          'Doc //Adm' searches for '**/Doc*/**/Adm*'"
    echo "  qc :name"
    echo "      Search for dir labeled with ':name' in index and cd to it."
    echo "      Use the command 'dstore' to manage labeled directories."
    echo "  qc -u [dir...]"
    echo "  qc -U [dir...]"
    echo "      Updates the indexes. '-U' also updates extended indexes. If dirs are"
    echo "      given only that directories are updated,"
    echo "  qc -l"
    echo "      List labeled dirs."
    echo "  qc -S"
    echo "      Print statistics of index."
    echo "  qc --config"
    echo "      Open index config file 'qc-index.cfg' in a editor. Uses \$VISUAL,"
    echo "      \$EDITOR or vi."
    echo "  qc -"
    echo "      Act like 'cd -'."
    echo "  qc"
    echo "      Act like 'cd \$HOME'."
    echo ""
    echo "See also: dstore --help"
    echo ""
    check_initialized
}

check_initialized()
{
    local idx_files=( "$QC_DIR"/*.index )
    if [ ${#idx_files[*]} -eq 0 ]; then
        echo "==============================================================================="
        echo
        echo "Quick Change Directory not initialized."
        echo
        echo "Your home directory needs to be scanned to create a index. Depending on its"
        echo "size this might take a few minutes."
        echo
        echo "Call 'qc -u' or 'qc -U' to create a index of your home directory."
        echo
        echo "See 'qc --help' for details."
        echo
        echo "==============================================================================="
        return 1
    else
        return 0
    fi
}

# Create regex from qc argument
# Used from qc and completion
# $*: The pattern to create a regex
args2regex()
{
    typeset glob regex w
    glob=''
    regex=''

    for w in "$@"; do
        # w="${w//+/*}"
        case "$w" in
            */) # don't append '*' if word ends with '/'
                w="${w%?}";;
            *\*) # don't append '*' if it already ends with '*'
                : ;;
            *)   w="$w*" ;;
        esac
        glob="$glob/$w"
    done
    if [ -n "${cl_completion:-}" ]; then
        # fix multiple trailing '*'
        if [[ "$glob" = *\*\* ]]; then
            glob="${glob%%*(\*)}*"
        fi
    fi

    # replace leading '/./' with current dir (without leading slash)
    glob="${glob/#\/.\//$PWD/}"

    # Remove
    # - leading slashes
    # - than leading asterisks followed by slashes
    # - than trailing slashes
    glob="$(echo "$glob" | sed 's%^/\+%%;s%^\*\+//*%%;s%/\+$%%')"

    while [ -n "$glob" ]; do

        case "$glob" in
            \*\**)
                glob="${glob#"${glob%%[!*]*}"}"
                if [ "${glob:0:1}" = "/" ]; then
                    # '**/' -> '\(.*/\)*'
                    glob="${glob:1}"
                    regex+='\(.*/\)*'
                else
                    # '**' -> '.*'
                    regex+='.*'
                fi
                ;;
            //*) # '//' -> '/.*/'
                regex+='/\(.*/\)*'
                glob="${glob#"${glob%%[!/]*}"}"
                ;;
            \**) # '*' -> '[^/]*'
                regex+='[^/]*'
                glob="${glob:1}"
                ;;
            \?*) # '?' -> '[^/]'
                regex+='[^/]'
                glob="${glob:1}"
                ;;
            \\\?*) # copy escaped char
                regex+='?'
                glob="${glob:2}"
                ;;
            \\*) # copy escaped char
                regex+="${glob:0:2}"
                glob="${glob:2}"
                ;;
            .*)
                regex+='\.'
                glob="${glob:1}"
                ;;
            *)
                regex+="${glob:0:1}"
                glob="${glob:1}"
                ;;
        esac
    done
    regex="${regex}$"
    echo "$regex"
}

# Determine index files. One file per line
# "$1": zero or more chars describing indexes to select
#       a: all indexes
#       h: default & hidden indexes
#       H: hidden indexes
#       e: default & extended indexes
#       E: extended indexes
#       EMPTY: default indexes
get_indexes()
{
    typeset IFS=$'\n'

    typeset sel="${1:-}"

    typeset default=0
    typeset hidden=0
    typeset extended=0


    if [[ -z $sel ]]; then
        default=1
    elif [[ $sel == *a* ]]; then
        default=1
        hidden=1
        extended=1
    else
        if [[ $sel = *[H]* ]]; then
            hidden=1
        fi
        if [[ $sel = *[h]* ]]; then
            default=1
            hidden=1
        fi
        if [[ $sel = *[E]* ]]; then
            extended=1
        fi
        if [[ $sel = *[e]* ]]; then
            default=1
            extended=1
        fi
    fi

    # make the hostname lower case
    typeset -l HOSTNAME="$HOSTNAME"

    typeset -a idx_files

    if [[ $default = 1 ]]; then
        idx_files+=( "$QC_DIR"/*.index "$QC_DIR"/*.index.host."$HOSTNAME" )
    fi
    if [[ $hidden = 1 ]]; then
        idx_files+=( "$QC_DIR"/*.index.hidden "$QC_DIR"/*.index.hidden.host."$HOSTNAME" )
    fi
    if [[ $extended = 1 ]]; then
        idx_files+=( "$QC_DIR"/*.index.ext "$QC_DIR"/*.index.ext.host."$HOSTNAME" )
    fi

    [ -e "$QC_DSTORE_INDEX" ] && idx_files+=( "$QC_DSTORE_INDEX" )

    if [ ${#idx_files[*]} -gt 0 ]; then
        printf "%s\n" "${idx_files[@]}"
    fi

}

# Select directories found in ~/.qc/*.index.
# $1: grep options (ignored for search by label)
# $2: Search extended indexes? ("true" or "")
# $3-: text to search for. With leading ':' triggers search by label.
dir_select()
{
    typeset grepOpt="$1"
    shift
    typeset indexSelect="$1"
    shift

    typeset IFS=$'\n'
    typeset -a dl idxFiles
    case $1 in
        :*)
            pattern=$1
            if [ ! -e "$QC_DSTORE_INDEX" ]; then
                echo >&2 "qc: Dstore index file not found! Use 'dstore' to create it."
                return 1
            fi
            # grep: -h: Suppress the prefixing of file names on output.
            mapfile -d$'\n' -t dl < <(grep -ahi -- "^${pattern}[^ ]* " "$QC_DSTORE_INDEX" | cut "-d " -f2- | sort -u)
            if [[ $# -gt 1 && ${#dl[*]} -eq 1 ]]; then
                shift
                local bd="${dl[0]%%/}/"
                dir_select "$grepOpt" "a" "$bd" "$@"
                return
            elif [ $# -gt 1 ]; then
                echo >&2 "WARNING: Extra arguments ignored ($pattern returned none or more than one directory)"
            fi
            ;;
        *)
            mapfile -d$'\n' -t idxFiles < <( get_indexes "$indexSelect")
            if [ ${#idxFiles[@]} = 0 ]; then
                echo >&2 "qc: No index file found! Use 'qc -u' or 'dstore' to create it."
                return 1
            fi
            pattern=$(args2regex "$@")
            # shellcheck disable=SC2086  # grepOpt should split
            mapfile -d$'\n' -t dl < <(grep --color=always -ah $grepOpt -- "/$pattern" "${idxFiles[@]}" | sed "s/^:[^ ]* //" | sort -u)
            ;;
    esac

    typeset cnt=${#dl[*]}

    if [ "$cnt" -eq 0 ]; then
        typeset IFS=' '
        echo >&2 "qc: $*: No matching directory found"
        return 1
    elif [ "$cnt" -eq 1 ]; then
        # echo and remove color codes
        echo "${dl[@]}" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
        return 0
    else
        # If selection list needs more than terminal hight lines
        # ask user, if he/she really want's to see it.
        if [ -n "${LINES:-}" ] && [ "$cnt" -gt $((LINES -1)) ]; then

            echo >&2 -n "Display all $cnt directories? (y or n) "
            read -rN1 yn
            case $yn in
                y|Y) echo >&2
                    ;;
                *) echo >&2
                    return
                    ;;
            esac
        fi

        if [ -z "${QC_SKIP_FILTER_EXISTING:-}" ]; then
            # filter out none existing dirs
            typeset i
            typeset orgCnt=$cnt
            for (( i=orgCnt-1; i>=0; i-- )); do
                printf >&2 "\rFiltering none existing directories: %d/%d" $((orgCnt-i)) "$orgCnt"
                # remove color codes for check
                if [ ! -d "$(echo "${dl[$i]}"| sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g")" ]; then
                    if [ -n "${QC_DBG:-}" ]; then
                        echo >&2 "REMOVING: ${dl[$i]}"
                    fi
                   unset "dl[$i]"
               fi
            done
            dl=( "${dl[@]}" )
            printf >&2 "\r\e[K"

            cnt=${#dl[*]}
            if [ "$orgCnt" -ne "$cnt" ]; then
                echo >&2 "qc: Removed $((orgCnt - cnt)) non existing directories from result"
            fi
        fi
        if [ "$cnt" -eq 0 ]; then
            echo >&2 "qc: $*: No matching directory found"
            return
        elif [ "$cnt" -eq 1 ]; then
            # echo and remove color codes
            echo "${dl[@]}" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
            return
        fi

        if [ -n "${QC_SORT_LENGTH:-}" ]; then
            #mapfile -d$'\n' -t dl < <(IFS=$'\n';perl -e 'print sort { length($a) <=> length($b) } <>' <<<"${dl[*]}" )
            mapfile -d$'\n' -t dl < <( IFS=$'\n'; ( awk '{ print length, $0 }' | sort -n -s | cut -d" " -f2- ) <<<"${dl[*]}" )
        fi

        typeset COLUMNS=0
        # replace home directory with '~' for display and later re-add it on
        # selected dir.
        dl=( "${dl[@]/#$HOME/\~}" )

        if [ -n "${QC_FZF:-}" ]; then
            the_dir="$(printf "%s\n" "${dl[@]}" | fzf -i --ansi )" # --preview='d={};ls --color ${d/#~/$HOME}')"
            if [ -n "$the_dir" ]; then
                    echo "${the_dir/#\~/$HOME}" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
            fi
        else
            local LINES=0
            local COLUMNS=1
            local PS3="# or 'q' to quit? "
            select dir in "${dl[@]}" ; do
                if [ "$dir" = "" ]; then
                    [ "$REPLY" = "q" ] && break
                else
                    # replace ~ with $HOME and remove color codes
                    echo "${dir/#\~/$HOME}" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
                    break
                fi
            done
        fi
    fi
}


# Update/create the index.
updateIndex()
{
    typeset PATH="$QC_DIR:$PATH"
    if command -v qc-build-index &>/dev/null; then
        echo "Updating index ..."
        typeset -a ARGS
        typeset d
        for d in "$@"; do
            if [ "$d" = "-E" ]; then
                ARGS+=( "-E" )
            else
                d="$(readlink -f "$d")"
                ARGS+=( "-i" "$d")
            fi
        done
        echo "qc-build-index ${ARGS[*]}"
        qc-build-index "${ARGS[@]}"
    else
        echo "Updating index (internal update)..."
        internalUpdateIndex "$@"
    fi
}

internalUpdateIndex()
{
    [ -z "${QC_DIR:-}" ] && QC_DIR="$HOME/.qc"
    if [ ! -d "$QC_DIR" ]; then
        mkdir "$QC_DIR" || return 1
    fi

    typeset INDEX_FILE=$QC_DIR/home.index
    # shellcheck disable=SC2155 # Declare and assign separately
    typeset NEW_INDEX=$(mktemp "${INDEX_FILE}.XXXX")

    find "${HOME}" -xdev -type d \( -name '.*' -o -name CVS \) -prune -o -xtype d -print >> "$NEW_INDEX"

    mv -f "$NEW_INDEX" "$INDEX_FILE"

    echo "Stored $(wc -l < "$INDEX_FILE") directory names."
}

# Show statistics of indexes. List index.dstore last.
index_statistics()
{
    mapfile -d$'\n' -t idx_list < <(get_indexes "a" | grep -v "$QC_DSTORE_INDEX")
    [ -e "$QC_DSTORE_INDEX" ] && idx_list+=( "$QC_DSTORE_INDEX" )
    for fn in "${idx_list[@]}"; do
        echo >&2 "$fn"
        echo >&2 "   Last Upd: $(stat -c "%y" "$fn")"
        # shellcheck disable=SC2183,SC2046  # wc produces two args
        printf >&2 "   Entries:  %'d (%'d bytes)\n" $(wc -lc <"$fn")
        if [ "$fn" = "$QC_DSTORE_INDEX" ]; then
            echo >&2 "   Labeled entries:  $(grep -c "^:" "$fn")"
        fi
    done
}


complete_index_dir()
{
    typeset grepOpt="$1"
    shift
    typeset indexSelect="$1"
    shift

    typeset IFS=$'\n'
    typeset -a dl idxFiles compl
    case $1 in
        :*)
            pattern=$1
            [ $# -gt 1 ] && exit 0
            if [ ! -e "$QC_DSTORE_INDEX" ]; then
                return 1
            fi
            # grep: -h: Suppress the prefixing of file names on output.
            grep -ahi -- "^${pattern}[^ ]* " "$QC_DSTORE_INDEX" | cut "-d " -f1 | sort -u
            ;;
        *)
            mapfile -d$'\n' -t idxFiles < <( get_indexes "$indexSelect")
            if [ ${#idxFiles[@]} = 0 ]; then
                return 1
            fi
            # shellcheck disable=SC2124 # this expands to one element
            last_part="${@:$#}"
            last_part="${last_part%%*(\*)}"
            pattern=$(args2regex "$@")
            if [[ ! "$pattern" =~ .*\*\$$ ]]; then
                clean_pattern="${pattern/%\$//}"
                pattern="${pattern/%\$/\/[^/]*\$}"
            else
                clean_pattern="${pattern/%\[^\/\]\*\$/}"
            fi
            #echo ">>$pattern<<"
            #echo ">>$clean_pattern<<"
            # shellcheck disable=SC2086  # grepOpt should split
            mapfile -d$'\n' -t compl < <(grep --color=never -ah $grepOpt -- "/$pattern" "${idxFiles[@]}" | sed "s|^.*\($clean_pattern\)|$last_part|;s|$|/|" | sort -u)

            printf '%q\n' "${compl[@]}"
            ;;
    esac
}

complete_local_dir()
{
    compgen -o dirnames -- "${@:$#}"
    exit 0
}

complete_option()
{
    # shellcheck disable=SC2124 # this expands to one element
    local cur="${@:$#}"
    if [[ " $*" = *--help* ]]; then
        exit 0
    elif [[ "$cur" = --* ]]; then
        printf "%s\n" --help --config --version  | grep -- "$cur"
    elif [[ "$cur" = -* ]]; then
        printf "%s\n" i e u U S l
        if [[ "$cur" != -?* ]]; then
            printf "%s\n" --help --config --version | grep -- "$cur"
        fi
        exit 1
    fi
}


#---------[ MAIN ]-------------------------------------------------------------

typeset grepOpt=""
typeset indexSelect=""
typeset printRegex=""
typeset OPTIND
typeset o

PATH="$PATH:$QC_DIR"

cl_completion=""
if [ "${1:-}" = "--complete" ]; then
    shift
    cl_completion=true
    complete_option "$@"
fi

while getopts ":ieEhHauUSlR-" o "$@"; do
    case $o in
        i) grepOpt="-i"
            ;;
        a) indexSelect="${indexSelect}a"
            ;;
        h) indexSelect="${indexSelect}h"
            ;;
        H) indexSelect="${indexSelect}H"
            ;;
        e) indexSelect="${indexSelect}e"
            ;;
        E) indexSelect="${indexSelect}E"
            ;;
        u)
            [ -n "$cl_completion" ] && complete_local_dir "$@"
            shift $((OPTIND-1))
            updateIndex -E "$@" >&2
            exit 0
            ;;
        U)
            [ -n "$cl_completion" ] && complete_local_dir "$@"
            shift $((OPTIND-1))
            updateIndex "$@" >&2
            exit 0
            ;;
        S)
            [ -n "$cl_completion" ] && exit 1
            index_statistics
            exit 0
            ;;
        l)
            [ -n "$cl_completion" ] && exit 1
            grep --color=always '^:[^ ]* ' "$QC_DSTORE_INDEX" >&2
            exit 0
            ;;
        R) printRegex=true
            ;;
        -)
            if [ "${!OPTIND:-}" = "--help" ]; then
                show_help >&2
                exit 0
            elif [ "${!OPTIND:-}" = "--version" ]; then
                echo "qc - Quick Change Directory v$qc_version" >&2
                exit 0
            elif [ "${!OPTIND:-}" = "--config" ]; then
                if [ ! -e "$QC_DIR/qc-index.cfg" ]; then
                    echo >&2 "ERROR: $QC_DIR/qc-index.cfg does not exist."
                    echo >&2 "       Use 'qc -u' to create a default config file."
                    exit 1
                fi
                ${VISUAL:-${EDITOR:-vi}} "$QC_DIR/qc-index.cfg" </dev/tty >/dev/tty
                exit 0
            else
                [ -n "$cl_completion" ] && exit 1
                echo >&2 "Invalid option '${!OPTIND:-}'"
                echo >&2 "Try 'qc --help' for more information."
                exit 1
            fi
            ;;
        *)
                echo >&2 "Invalid option '$OPTARG'"
                echo >&2 "Try 'qc --help' for more information."
                exit 1
            ;;
    esac
done

shift $((OPTIND-1))

if [ -n "$printRegex" ]; then
    args2regex "$@" >&2
    exit 0
fi

if ! check_initialized >&2; then
    exit 1
fi

# if args include hidden filename act like '-h' was given
if [[ " $*" = *[\ /].[!/]* ]] && [[ "$indexSelect" != [hH] ]]; then
    indexSelect="h"
fi

if [ -n "${cl_completion:-}" ]; then
    if [ "$*" = "" ]; then
        exit 0
    fi

    complete_index_dir "$grepOpt" "$indexSelect" "$@"
    exit 0
fi

if [ "$*" = "" ]; then
    echo "$HOME"
elif [ "$*" = "-" ]; then
    echo "-"
else
    # shellcheck disable=SC2155 # Declare and assign separately
    typeset tgt=$(dir_select "$grepOpt" "$indexSelect" "$@")
    if [ -n "${tgt:-}" ]; then
        echo "$tgt"
    else
        exit 1
    fi
fi

# vim: ft=sh
