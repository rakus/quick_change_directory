#!/bin/bash
#
# FILE: qc-build-index
#
# ABSTRACT: Reads qc-index.cfg and builds indexes.
#
# The content of qc-index.cfg describes the indexes to create.
# Empty lines and lines starting with '#' are ignored.
#
# Example qc-index.cfg:
#
#    # create index of $HOME
#    test.index $HOME -- '.*' CVS
#
#    # create index of home that only containing hidden directories (and their childs)
#    test.hidden.index.ext -f '*/.*' $HOME -- .settings .git .svn .hg '.jazz*' .bzr .qc .cp .cache CVS
#
# AUTHOR: Ralf Schandl
#
# CREATED: 2017-03-02
#

script_dir="$(cd "$(dirname "$0")" && pwd)" || exit 1
script_name="$(basename "$0")"
script_file="$script_dir/$script_name"

set -u

qc_version=2.0

[ -z "${QC_DIR:-}" ] && QC_DIR=$HOME/.qc
QC_DSTORE_INDEX=$QC_DIR/index.dstore

CFG="$QC_DIR/qc-index.cfg"

show_help()
{
    echo "USAGE:"
    echo "   $script_name [-E] [-i dir] [index...]"
    echo "   $script_name --cron [minutes]"
    echo ""
    echo "   -H      Don't update hidden index(es)."
    echo ""
    echo "   -E      Don't update extension index(es)."
    echo ""
    echo "   -i dir  Incremental update the given dir in the affected index(es)."
    echo "           Indexes that does not contain the dir are not touched."
    echo ""
    echo "   index   Name of the indexes that should be updated. The given names"
    echo "           are matched against the index names. So 'home' will match"
    echo "           'home.index' and 'home.hidden.index.ext'."
    echo "           To only update extension indexes use '*.ext'."
    echo ""
    echo "   --cron [minutes]"
    echo "           Configure crontab to run $script_name."
    echo "           minutes:"
    echo "             not given: Lists current crontab config."
    echo "             0:         Removes $script_name from crontab."
    echo "             1 - 59:    Configures to run every given minutes."
    echo "                        A existing configuration is replaced."
    echo ""
    exit 1
}

trim_str() {
    typeset str="$*"
    # remove leading whitespaces
    str="${str#"${str%%[![:space:]]*}"}"
    # remove trailing whitespaces
    str="${str%"${str##*[![:space:]]}"}"
    echo -n "$str"
}

#
# Check whether the first argument is somewhere in the following.
# Used like: contains x.txt "${file[@]}"
#
contained()
{
    typeset e
    for e in "${@:2}"; do
        case "$1" in
            $e*)
                return 0
                ;;
        esac
    done
    return 1
}

is_descendant()
{
    typeset e
    for e in "${@:2}"; do
        case "$1" in
            "$e")
                return 0
                ;;
            "$e"/*)
                return 0
                ;;
        esac
    done
    return 1
}

build_index()
{
    typeset IDX_NAME=$1
    shift

    if [ "$IDX_NAME" != "$(basename "$IDX_NAME")" ]; then
        echo >&2 "ERROR: Index name must be a plain filename: $IDX_NAME"
        return 1
    fi

    typeset -a MAX_DEPTH=()
    typeset -a FILTER=()
    typeset -a INC_UPD=()
    typeset OPTARG OPTIND=0 d
    while getopts ":f:i:d:" o "$@"; do
        case $o in
            f) FILTER=( "${FILTER[@]}" "$OPTARG" )
                ;;
            i)
                d=$OPTARG
                d="${d%"${d##*[!/]}"}"
                INC_UPD+=( "$d" )
                ;;
            d)
                if [ ${#MAX_DEPTH[@]} -ne 0 ]; then
                    echo >&2 "ERROR: Multiple -d for $IDX_NAME"
                    return 1
                fi
                if [ -n "${OPTARG//[0-9]/}" ]; then
                    echo >&2 "ERROR: Argument for -d not a number for $IDX_NAME"
                    return 1
                fi
                MAX_DEPTH=( "-maxdepth" "$OPTARG" )
                ;;
            *)
                return 1
                ;;
        esac
    done

    shift $((OPTIND-1))

    typeset -a ROOTS=()
    while [ $# -gt 0 ]; do
        if [ "$1" = "--" ]; then
            shift
            break
        fi
        if d="$(readlink -e "$1")"; then
            ROOTS=( "${ROOTS[@]}" "$d" )
        else
            echo >&2 "ERROR: Root directory not found: $1"
        fi
        shift
    done
    if [ ${#ROOTS[@]} -eq 0 ]; then
        echo >&2 "ERROR: No root directory"
        return 1
    fi

    case "$IDX_NAME" in
        *.index.hidden) ;&
        *.index.hidden.$HOSTNAME)
            for r in "${ROOTS[@]}"; do
                FILTER+=( "${r}*/.**" )
            done
            ;;
    esac

    typeset -a IGNORE_DIRS=()
    while [ $# -gt 0 ]; do
        IGNORE_DIRS=( "${IGNORE_DIRS[@]}" "$1" )
        shift
    done

    #echo "INDEX:  $IDX_NAME"
    #echo "ROOTS:  ${ROOTS[@]}"
    #echo "IGNORE: ${IGNORE_DIRS[@]}"
    #echo "FILTER: ${FILTER[@]}"

    [ ! -d "$QC_DIR" ] && mkdir "$QC_DIR"

    typeset INDEX_FILE=$QC_DIR/$IDX_NAME

    typeset -a INC_ROOTS=()
    if [ ${#INC_UPD[@]} -gt 0 ]; then
        if [ -e "$INDEX_FILE" ]; then
            for d in "${INC_UPD[@]}"; do
                if [ -d "$d" ]; then
                    if is_descendant "$d" "${ROOTS[@]}"; then
                        INC_ROOTS+=( "$d" )
                        #else
                        #    echo "WARN: Index $IDX_NAME does not contain $d -- ignored"
                    fi
                else
                    echo "WARN: $d does not exist -- ignored"
                fi
            done
            if [ ${#INC_ROOTS[@]} -eq 0 ]; then
                if [ -z "$QC_LIST_UPD" ]; then
                    echo >&2 "ERROR: Index $IDX_NAME does not contain any of [ ${INC_UPD[*]} ]"
                    return 1
                else
                    echo "Skipping $IDX_NAME: does not contain any of [ ${INC_UPD[*]} ]"
                    return 0
                fi
            fi
        else
            echo "Index $IDX_NAME does not exist -- ignoring incremental update"
        fi
    fi

    typeset NEW_INDEX
    NEW_INDEX=$(mktemp "${INDEX_FILE/.index/.updating-index}.XXXX")

    # if incremental update set new ROOTS and prefill index file
    if [ ${#INC_ROOTS[@]} -gt 0 ]; then
        ROOTS=( "${INC_ROOTS[@]}" )
        re=$(printf "%s|" "${ROOTS[@]}")
        re=${re:0:-1}
        grep -aEv "^($re)(/|$)" "$INDEX_FILE" > "$NEW_INDEX"
    fi
    typeset inc_start
    inc_start=$(wc -l < "$NEW_INDEX")

    # Build the 'find' expression for ignored dirs.
    typeset -a ignDirs=()
    if [ ${#IGNORE_DIRS[@]} -gt 0 ]; then
        ignDirs=( '(' )
        for ign in "${IGNORE_DIRS[@]}"; do
            if [[ "$ign" =~ ^/.*$ ]]; then
                ignDirs+=(-path "$ign" -o)
            elif [[ "$ign" =~ ^\./.*$ ]]; then
                for R in "${ROOTS[@]}"; do
                    ignDirs+=(-path "${R}${ign:1}" -o)
                done
            elif [[ "$ign" =~ ^.*/.*$ ]]; then
                ignDirs+=(-path "*$ign" -o)
            else
                ignDirs+=(-name "$ign" -o)
            fi
        done
        # remove the final '-o'
        unset 'ignDirs[-1]'
        ignDirs+=( ")" )
    else
        # nothing to ignore
        ignDirs=( '-false' )
    fi

    typeset -a filter=()
    if [ ${#FILTER[@]} -gt 0 ]; then
        filter=( '(' )
        for f in "${FILTER[@]}"; do
            if [ ${#filter[@]} -gt 1 ]; then
                filter+=(-o)
            fi
            filter+=(-path)
            filter+=("$f")
        done
        filter+=(")")
    fi

    # find all directories excluding those configured
    # echo >&2 find "${ROOTS[@]}" -xdev -type d "${ignDirs[@]}" -prune -o -xtype d "${filter[@]}" -print
    find "${ROOTS[@]}" "${MAX_DEPTH[@]}" -xdev -type d "${ignDirs[@]}" -prune -o -xtype d "${filter[@]}" -print >> "$NEW_INDEX"
    # Don't check exit code.
    # A "permission denied" in some subdir would kill the index

    if [ -s "$NEW_INDEX" ]; then
        # replace .qc/index with new content
        mv -f "$NEW_INDEX" "$INDEX_FILE"

        typeset dir_count
        dir_count=$(wc -l < "$INDEX_FILE")

        typeset UPD=''
        if [ ${#INC_ROOTS[@]} -gt 0 ]; then
            dir_diff=$((dir_count - inc_start))
            UPD=" (Updated: $dir_diff)"
        fi

        echo "Stored $dir_count directory names$UPD."
    else
        rm -f "$NEW_INDEX"
        echo "No directories found -- no index created."
    fi
}

copy_default_config()
{
    if [ -r "$script_dir/../share/quick-change-directory/qc-index.cfg" ]; then
        echo "Copying default config file to $CFG"
        cp "$script_dir/../share/quick-change-directory/qc-index.cfg" "$CFG"
    elif [ -r "/usr/share/quick-change-directory/qc-index.cfg" ]; then
        echo "Copying default config file to $CFG"
        cp "/usr/share/quick-change-directory/qc-index.cfg" "$CFG"
    elif [ -e "$script_dir/qc-index.cfg" ]; then
        echo "Copying default config file to $CFG"
        cp "$script_dir/qc-index.cfg" "$CFG"
    fi
    if [ ! -e "$CFG" ]; then
        echo "Creating simple default config in $CFG"
        cat <<'EOF' > "$CFG"
# simple default config

# create index of $HOME that ignores all hidden directories and directories
# named 'CVS'
home.index $HOME -- '.*' CVS

# create index of hidden directories below $HOME.
# Ignores some 'useless' hidden dirs.
home.index.hidden $HOME -- .metadata .settings .git .svn .hg '.jazz*' .bzr .qc .cp .cache CVS
EOF
    fi
}

configure_crontab()
{
    if ! command -v crontab >/dev/null 2>&1; then
        echo "ERROR: Command 'crontab' not available"
        return 1
    fi
    local cron_label="# Quick Change Directory: update index"

    if [ -z "$1" ]; then
        crontab -l 2>/dev/null | grep "$cron_label\|$script_name"
        return 0
    fi
    if [ -n "${1//[0-9]/}" ]; then
        echo >&2 "ERROR: Invalid minutes value for '--cron'"
        return 1
    fi
    typeset -i minutes=$1
    # shellcheck disable=SC2086 # minutes is a int number
    if [ $minutes -eq 0 ] ; then
        echo "Removing $script_name from crontab"
        crontab -l 2>/dev/null | grep -v "$cron_label\|$script_name" | crontab -
        return
    elif [ $minutes -lt 1 ] || [ $minutes -gt 59 ]; then
        echo >&2 "ERROR: Minutes value for '--cron' out of range 1-59"
        return 1
    fi

    local exe="${script_file/#$HOME/\${HOME\}}"
    local log_file="$QC_DIR/qc-build-index.log"
    log_file="${log_file/#$HOME/\${HOME\}}"

    local cron_entry="*/$minutes * * * * $exe >$log_file 2>&1"

    echo "Configuring crontab to run $script_name every $minutes minutes:"
    echo "$cron_label"
    echo "$cron_entry"

    (crontab -l 2>/dev/null | grep -v "$cron_label" | grep -v "$script_name"; echo "$cron_label"; echo "$cron_entry") | crontab -
}

#---------[ MAIN ]-------------------------------------------------------------

typeset -a INC_UPD=()
while getopts ":HEi:-" o "$@"; do
    case $o in
        i)
            d=$OPTARG
            d="${d%"${d##*[!/]}"}"
            INC_UPD+=( -i "$d" )
            ;;
        H)
            ignHidden=true
            ;;
        E)
            ignExt=true
            ;;
        -)
            if [ "${!OPTIND}" = "--help" ]; then
                show_help
                exit 0
            elif [ "${!OPTIND}" = "--version" ]; then
                echo "$script_name - Quick Change Directory v$qc_version"
                exit 0
            elif [ "${!OPTIND}" = "--cron" ]; then
                shift
                configure_crontab "${!OPTIND:-}"
                exit
            else
                echo >&2 "Invalid option '${!OPTIND:-}'" && echo >&2 ""
                echo >&2 "Try '$script_name --help' for more information."
                exit 1
            fi
            ;;
        *)
            echo >&2 "Invalid option '$OPTARG'"
            echo >&2 "Try '$script_name --help' for more information."
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))

if [ ! -d "$QC_DIR" ]; then
    echo "qc-build-index: First call -- initialization ...."
    echo "Creating directory $QC_DIR"
    mkdir "$QC_DIR" || exit 1
    touch "$QC_DSTORE_INDEX"
fi
if [ ! -e "$CFG" ]; then
    copy_default_config
fi


export QC_LIST_UPD=true

shopt -s extglob

# make hostname upper case
typeset -u HOSTNAME="$HOSTNAME"

typeset -i idxCount=0
oifs="$IFS"
IFS=$'\n'
typeset -i lno=0
while IFS= read -r line; do
    ((lno += 1))
    line=$(trim_str "$line")
    if [[ "$line" = \#* ]] || [ -z "$line" ]; then
        continue
    fi
    # shellcheck disable=SC2016  # the '$(' MUST NOT be expanded
    if [[ $line == *'$('* ]] || [[ $line == *'`'* ]]; then
        printf >&2 '%s[%d] ERROR: Possible command substitution: %s\n' "$CFG" "$lno" "$line"
        continue
    fi
    #echo "LN: $line"

    if ! eval "ARGS=( $line )"; then
        printf >&2 '%s[%d] ERROR: Cannot parse: %s\n' "$CFG" "$lno" "$line"
        continue
    fi
    ((idxCount++))

    if [ -n "${ignExt:-}" ]; then
        case "${ARGS[0]}" in
            *.index.ext) continue ;;
            *.index.ext.$HOSTNAME) continue ;;
        esac
    fi

    if [ -n "${ignHidden:-}" ]; then
        case "${ARGS[0]}" in
            *.index.hidden) continue ;;
            *.index.hidden.$HOSTNAME) continue ;;
        esac
    fi

    case "${ARGS[0]}" in
        *.index) : ;;
        *.index.ext) : ;;
        *.index.hidden) : ;;
        *.index.$HOSTNAME) : ;;
        *.index.ext.$HOSTNAME) : ;;
        *.index.hidden.$HOSTNAME) : ;;
        *.index.!(*.*)) continue ;; # ignore index with other host name
        *.index.ext.!(*.*)) continue ;; # ignore index with other host name
        *.index.hidden.!(*.*)) continue ;; # ignore index with other host name
        *) printf >&2 '%s[%d] Ignoring index %s\n' "$CFG" "$lno" "${ARGS[0]}"
            continue
            ;;
    esac

    if [ $# -gt 0 ]; then
        if ! contained "${ARGS[0]}" "$@"; then
            continue
        fi
    fi

    if [ ${#INC_UPD[@]} -gt 0  ]; then
        tmpargs=("${ARGS[0]}")
        tmpargs+=( "${INC_UPD[@]}")
        tmpargs+=("${ARGS[@]:1}")
        ARGS=("${tmpargs[@]}")
    fi

    echo "Updating ${ARGS[0]}..."
    if ! build_index "${ARGS[@]}"; then
        printf >&2 '%s[%d] ERROR: Building index failed.\n' "$CFG" "$lno"
    fi
done < "$CFG"
IFS="$oifs"

if [ "$idxCount" -gt 0 ]; then
    exit 0
else
    echo >&2 "ERROR: No index defined in $CFG"
    exit 1
fi



