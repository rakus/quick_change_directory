#!/usr/bin/env bash
#
# FILE: qc-build-index
#
# ABSTRACT: Reads qc-index.cfg and builds indexes.
#
# The content of qc-index.cfg describes the indexes to create.
# Empty lines and lines starting with '#' are ignored.
#
# Example qc-index.cfg:
#
#    # create index of $HOME
#    home.index $HOME -- CVS
#
#    # create index of home that only containing hidden directories (and their childs)
#    home.index.hidden $HOME -- .metadata .settings .git .svn .hg '.jazz*' .bzr .qc .cp .cache CVS
#
# AUTHOR: Ralf Schandl
#
# CREATED: 2017-03-02
#

script_dir="$(cd "$(dirname "$0")" && pwd)" || exit 1
script_name="$(basename "$0")"
script_file="$script_dir/$script_name"

set -u

qc_version=2.0

[ -z "${QC_DIR:-}" ] && QC_DIR=$HOME/.qc
QC_DSTORE_INDEX=$QC_DIR/index.dstore

CFG="$QC_DIR/qc-index.cfg"

typeset -a TMP_FILES=()

show_help()
{
    echo "USAGE:"
    echo "   $script_name [-H] [-E] [-i dir] [index...]"
    echo "   $script_name --cron [minutes]"
    echo ""
    echo "   -H      Don't update hidden index(es)."
    echo ""
    echo "   -E      Don't update extension index(es)."
    echo ""
    echo "   -i dir  Incremental update the given dir in the affected index(es)."
    echo "           Indexes that does not contain the dir are not touched."
    echo ""
    echo "   index   Name of the indexes that should be updated. The given names are"
    echo "           matched against the index names. So 'home' will match home.index"
    echo "           and 'home.hidden.index.ext'."
    echo "           To only update extension indexes use '*.ext'."
    echo ""
    echo "   --cron [minutes]"
    echo "           Configure crontab to run $script_name."
    echo "           minutes:"
    echo "             not given: Lists current crontab config."
    echo "             0:         Removes $script_name from crontab."
    echo "             1 - 30:    Configures to run on the full hour and every multiple"
    echo "                        of given minutes. E.g. for '12' it will run at "
    echo "                        *:00, *:12, *:24, *:36 and *:48."
    echo ""
}

trim_str() {
    typeset str="$*"
    # remove leading whitespaces
    str="${str#"${str%%[![:space:]]*}"}"
    # remove trailing whitespaces
    str="${str%"${str##*[![:space:]]}"}"
    echo -n "$str"
}

# shellcheck disable=SC2317  # called via trap
cleanup()
{
    for file in "${TMP_FILES[@]}"; do
        rm -f "$file"
    done
}

#
# Check whether the first argument is somewhere in the following.
# Used like: contains x.txt "${file[@]}"
#
contained()
{
    typeset e
    for e in "${@:2}"; do
        case "$1" in
            $e*)
                return 0
                ;;
        esac
    done
    return 1
}

is_descendant()
{
    typeset e
    for e in "${@:2}"; do
        case "$1" in
            "$e")
                return 0
                ;;
            "$e"/*)
                return 0
                ;;
        esac
    done
    return 1
}

# Array to comma-seperated string
array2Str()
{
    # shellcheck disable=SC2155
    local s="$(printf "%s, " "$@")"
    echo "${s%, }"
}

#
# Builds an index.
# Parses the given arguments and then builds index with either fd or find.
# $* the index line parsed as array
build_index()
{
    typeset idx_name=$1
    shift

    if [ "$idx_name" != "$(basename "$idx_name")" ]; then
        echo >&2 "ERROR: Index name must be a plain filename: $idx_name"
        return 1
    fi

    # global variable used by build_index_using_fd and build_index_using_find
    typeset -a ROOTS=()
    typeset -a FILTER=()
    typeset -a IGNORE_DIRS=()

    # the fd-specific index option '-I'
    typeset fd_ignore_ignores=""

    typeset include_hidden=""
    typeset hidden_only=""
    typeset -i max_depth=-1
    typeset -a inc_upd_roots=()
    typeset OPTARG OPTIND=0 d
    while getopts ":f:i:d:hI" o "$@"; do
        case $o in
            f) FILTER+=( "$OPTARG" )
                ;;
            i)
                d=$OPTARG
                # remove trailing slash(es)
                d="${d%"${d##*[!/]}"}"
                inc_upd_roots+=( "$d" )
                ;;
            d)
                if [ $max_depth -ne -1 ]; then
                    echo >&2 "ERROR: Multiple -d for $idx_name"
                    return 1
                fi
                if [ -n "${OPTARG//[0-9]/}" ]; then
                    echo >&2 "ERROR: Argument for -d is not a number for $idx_name"
                    return 1
                fi
                max_depth="$OPTARG"
                ;;
            h)
                include_hidden=true
                ;;
            I)
                # only used when index is build with 'fd'
                # silently ignored when using 'find'
                fd_ignore_ignores=true
                ;;
            *)
                echo >&2 "ERROR: Unknown index option $OPTARG"
                return 1
                ;;
        esac
    done

    shift $((OPTIND-1))

    while [ $# -gt 0 ]; do
        if [ "$1" = "--" ]; then
            shift
            break
        fi
        if [[ "$1" != '/'* ]]; then
            echo >&2 "ERROR: Root directory is not a absolute path: $1"
        elif d="$(readlink -e "$1")"; then
            ROOTS=( "${ROOTS[@]}" "$d" )
        else
            echo >&2 "ERROR: Root directory not found: $1"
        fi
        shift
    done
    if [ ${#ROOTS[@]} -eq 0 ]; then
        echo >&2 "ERROR: No root directory -- No index"
        return 1
    fi

    case "$idx_name" in
        *.index.hidden) ;&
        *.index.hidden.$HOSTNAME)
            hidden_only=true
            ;;
        *) : ;;
    esac

    while [ $# -gt 0 ]; do
        IGNORE_DIRS=( "${IGNORE_DIRS[@]}" "$1" )
        shift
    done

    [ ! -d "$QC_DIR" ] && mkdir "$QC_DIR"

    typeset index_file=$QC_DIR/$idx_name

    typeset new_index
    new_index=$(mktemp "${index_file/.index/.updating-index}.XXXX")
    TMP_FILES+=( "$new_index" )

    typeset -a inc_roots=()
    if [ ${#inc_upd_roots[@]} -gt 0 ]; then
        if [ -e "$index_file" ]; then
            for d in "${inc_upd_roots[@]}"; do
                if [ ! -d "$d" ]; then
                    echo "WARN: $d does not exist -- ignored"
                    continue
                fi
                if ! is_descendant "$d" "${ROOTS[@]}"; then
                    continue
                fi

                if [ -n "${hidden_only:-}${include_hidden:-}" ] || [[ "$d" != *'/.'* ]]; then
                    inc_roots+=( "$d" )
                fi
            done
            if [ ${#inc_roots[@]} -eq 0 ]; then
                echo "Skipping $idx_name: does not contain any of [ $(array2Str "${inc_upd_roots[@]}") ]"
                return 0
            else
                # if incremental update set new ROOTS and prefill index file
                ROOTS=( "${inc_roots[@]}" )
                re=$(printf "%s|" "${ROOTS[@]}")
                re=${re%|}
                grep -aEv "^($re)(/|$)" "$index_file" > "$new_index"
            fi
        else
            echo "Index $idx_name does not exist -- ignoring incremental update"
        fi
    fi

    typeset inc_start
    inc_start=$(wc -l < "$new_index")

    # echo "-------------------------------------"
    # echo "INDEX:          $idx_name"
    # echo "Tmp-INDEX:      $new_index"
    # echo "ROOTS:          ${ROOTS[*]}"
    # echo "IGNORE:         [ ${IGNORE_DIRS[*]} ]"
    # echo "FILTER:         [ ${FILTER[*]} ]"
    # echo "max_depth:      '$max_depth'"
    # echo "hidden_only:    '$hidden_only'"
    # echo "include_hidden: '$include_hidden'"

    if [ -n "${QC_USE_FIND:-}" ]; then
        build_index_using_find "$new_index" "$max_depth" "$hidden_only" "$include_hidden"
    elif [ ${#FILTER[@]} -gt 0 ]; then
        echo "Using 'find' for this index as it uses index filter option (-f)"
        build_index_using_find "$new_index" "$max_depth" "$hidden_only" "$include_hidden"
    else
        build_index_using_fd "$new_index" "$max_depth" "$hidden_only" "$include_hidden" "$fd_ignore_ignores"
    fi

    if [ -s "$new_index" ]; then
        # replace .qc/index with new content
        mv -f "$new_index" "$index_file"

        typeset dir_count
        dir_count=$(wc -l < "$index_file")

        typeset upd_msg=''
        if [ ${#inc_roots[@]} -gt 0 ]; then
            dir_diff=$((dir_count - inc_start))
            upd_msg=" (Updated: $dir_diff)"
        fi

        echo "Stored $dir_count directory names$upd_msg."
    else
        rm -f "$new_index"
        echo "No directories found -- no index created."
    fi
}

#
# Builds the index with 'find'
# Uses global arrays:
# - ROOTS
# - IGNORE_DIRS
# - FILTER
build_index_using_find()
{
    local new_index="$1"
    local max_depth="$2"
    local hidden_only="$3"
    local include_hidden="$4"

    # find option for directories to ignore
    typeset -a ign_dirs=()
    if [ ${#IGNORE_DIRS[@]} -gt 0 ]; then
        ign_dirs=( '(' )
        if [ -z "${include_hidden:-}${hidden_only:-}" ]; then
                ign_dirs+=(-path '*/.*')
        fi
        for ign in "${IGNORE_DIRS[@]}"; do
            if [ ${#ign_dirs[@]} -gt 1 ]; then
                ign_dirs+=(-o)
            fi
            if [[ "$ign" =~ ^/.*$ ]]; then
                ign_dirs+=(-path "$ign")
            elif [[ "$ign" =~ ^\./.*$ ]]; then
                for r in "${ROOTS[@]}"; do
                    ign_dirs+=(-path "${r}${ign:1}")
                done
            elif [[ "$ign" =~ ^.*/.*$ ]]; then
                ign_dirs+=(-path "*$ign")
            else
                ign_dirs+=(-name "$ign")
            fi
        done
        ign_dirs+=( ")" )
    elif [ -z "${include_hidden:-}${hidden_only:-}" ]; then
        ign_dirs+=( -path '*/.*' )
    else
        # nothing to ignore
        ign_dirs=( '-false' )
    fi

    # if hidden only, add it to FILTER
    if [ -n "${hidden_only:-}" ]; then
        FILTER+=('*/.*')
    fi

    # build filter options
    typeset -a filter=()
    if [ ${#FILTER[@]} -gt 0 ]; then
        filter=( '(' )
        for f in "${FILTER[@]}"; do
            if [ ${#filter[@]} -gt 1 ]; then
                filter+=(-o)
            fi
            filter+=(-path)
            filter+=("$f")
        done
        filter+=(")")
    fi

    typeset -a max_depth_arg
    if [ "$max_depth" -ne -1 ]; then
        max_depth_arg=( "-maxdepth" "$max_depth"  )
    else
        max_depth_arg=()
    fi

    # find all directories excluding those configured
    find -L "${ROOTS[@]}" "${max_depth_arg[@]}" -xdev -type d "${ign_dirs[@]}" -prune -o -xtype d "${filter[@]}" -print >> "$new_index"
    # Don't check exit code.
    # A "permission denied" in some subdir would kill the index
}

#
# Builds the index with 'find'
# Uses global arrays:
# - ROOTS
# - IGNORE_DIRS
# Does NOT use FILTER, as this is not supported with 'fd'.
build_index_using_fd()
{
    local new_index="$1"
    local max_depth="$2"
    local hidden_only="$3"
    local include_hidden="$4"
    local fd_ignore_ignores="$5"

    # fd option for directories to ignore
    typeset -a ign_dirs=()
    for d in "${IGNORE_DIRS[@]}"; do
        ign_dirs+=( --exclude "**/$d" --exclude "**/$d/**" )
    done

    typeset -a fd_args=()
    # handle hidden_only and include_hidden
    if [ -n "$hidden_only$include_hidden" ]; then
        fd_args+=( --hidden )
    fi

    if [ -n "$hidden_only" ]; then
        fd_pattern='.*/\..*'
    else
        fd_pattern=".*"
    fi

    # prefill index with root directories, as these are not printed by fd
    if [ -n "${hidden_only:-}" ]; then
        for r in "${ROOTS[@]}"; do
            if [[ "$r" = *"/."* ]]; then
                echo "$r" >> "$new_index"
            fi
        done
    else
        for r in "${ROOTS[@]}"; do
            echo "$r" >> "$new_index"
        done
    fi

    if [ "$max_depth" -ne -1 ]; then
        fd_args=( "--max-depth" "$max_depth" )
    fi

    if [ -n "$fd_ignore_ignores" ]; then
        fd_args+=("--no-ignore")
    fi

    fd --follow --xdev --full-path --case-sensitive --type d "${fd_args[@]}" "${ign_dirs[@]}" "${fd_pattern}" "${ROOTS[@]}" | sed 's%/$%%' >> "$new_index"
}


copy_default_config()
{
    if [ -r "$script_dir/../share/quick-change-directory/qc-index.cfg" ]; then
        echo "Copying default config file to $CFG"
        cp "$script_dir/../share/quick-change-directory/qc-index.cfg" "$CFG"
    elif [ -r "/usr/share/quick-change-directory/qc-index.cfg" ]; then
        echo "Copying default config file to $CFG"
        cp "/usr/share/quick-change-directory/qc-index.cfg" "$CFG"
    elif [ -e "$script_dir/qc-index.cfg" ]; then
        echo "Copying default config file to $CFG"
        cp "$script_dir/qc-index.cfg" "$CFG"
    fi
    if [ ! -e "$CFG" ]; then
        echo "Creating simple default config in $CFG"
        cat <<'EOF' > "$CFG"
# simple default config

# create index of $HOME excluding hidden directories and directories named 'CVS'
home.index $HOME -- CVS

# create index of hidden directories below $HOME.
# Ignores some 'useless' hidden dirs.
home.index.hidden $HOME -- .metadata .settings .git .svn .hg '.jazz*' .bzr .qc .cp .cache CVS
EOF
    fi
}

configure_crontab()
{
    if ! command -v crontab >/dev/null 2>&1; then
        echo "ERROR: Command 'crontab' not available"
        return 1
    fi
    local cron_label="# Quick Change Directory: update index"

    if [ -z "${1:-}" ]; then
        crontab -l 2>/dev/null | grep "$cron_label\|$script_name"
        return 0
    fi
    if [ -n "${1//[0-9]/}" ]; then
        echo >&2 "ERROR: Invalid minutes value for '--cron': '$1'"
        return 1
    fi
    typeset -i minutes=$1
    # shellcheck disable=SC2086 # minutes is a int number
    if [ $minutes -eq 0 ] ; then
        echo "Removing $script_name from crontab"
        crontab -l 2>/dev/null | grep -v "$cron_label\|$script_name" | crontab -
        return
    elif [ $minutes -lt 1 ] || [ $minutes -gt 30 ]; then
        echo >&2 "ERROR: Minutes value for '--cron' out of range 1-30"
        return 1
    fi

    local exe="${script_file/#$HOME/\${HOME\}}"
    local log_file="$QC_DIR/qc-build-index.log"
    log_file="${log_file/#$HOME/\${HOME\}}"

    local cron_entry="*/$minutes * * * * $exe >$log_file 2>&1"

    echo "Configuring crontab to run $script_name every $minutes minutes:"
    echo "$cron_label"
    echo "$cron_entry"

    (crontab -l 2>/dev/null | grep -v "$cron_label" | grep -v "$script_name"; echo "$cron_label"; echo "$cron_entry") | crontab -
}

#---------[ MAIN ]-------------------------------------------------------------

trap "cleanup" EXIT

typeset -a inc_upd=()

if ! _args="$(getopt -n "$script_name" -o "i:HE" --long "help,version,cron" -- "$@")"; then
    echo >&2 "Try '$script_name --help' for more information."
    exit 1
fi
eval "set -- $_args"

while true; do
    case $1 in
        -i)
            shift
            d=$1
            d="${d%"${d##*[!/]}"}"
            if [ -d "$d" ]; then
                inc_upd+=( -i "$d" )
            else
                echo >&2 "ERROR: Not a (existing) directory: $d"
                exit 1
            fi
            ;;
        -H)
            ignHidden=true
            ;;
        -E)
            ignExt=true
            ;;
        --help)
            show_help
            exit 0
            ;;
        --version)
            echo "$script_name - Quick Change Directory v$qc_version"
            exit 0
            ;;
        --cron)
            shift
            if [ "$1" != "--" ] || [ "$#" -gt 2 ]; then
                echo >&2 "Error: Invalid arguments for --cron"
                exit 1
            fi
            shift
            configure_crontab "${1:-}"
            exit
            ;;
        --)
            shift
            break
            ;;
        *)
            echo >&2 "Invalid option '$1'"
            echo >&2 "Try '$script_name --help' for more information."
            exit 1
            ;;
    esac
    shift
done

shift $((OPTIND-1))

if [ ! -d "$QC_DIR" ]; then
    echo "qc-build-index: First call -- initialization ...."
    echo "Creating directory $QC_DIR"
    mkdir "$QC_DIR" || exit 1
    touch "$QC_DSTORE_INDEX"
fi
if [ ! -e "$CFG" ]; then
    copy_default_config
fi

if [[ -n "${QC_USE_FIND:-}" || -z "$(command -v fd)" ]]; then
    echo "Using find command"
    QC_USE_FIND=true
else
    echo "Using fd command"
    unset QC_USE_FIND
fi

shopt -s extglob

# make hostname lower case
typeset -l HOSTNAME="$HOSTNAME"

typeset -i idxCount=0
oifs="$IFS"
IFS=$'\n'
typeset -i lno=0
while IFS= read -r line; do
    ((lno += 1))
    line=$(trim_str "$line")
    if [[ "$line" = \#* ]] || [ -z "$line" ]; then
        continue
    fi

    # Check for command substitution -- we don't allow this
    # shellcheck disable=SC2016  # the '$(' MUST NOT be expanded
    if [[ $line == *'$('* ]] || [[ $line == *'`'* ]]; then
        printf >&2 '%s[%d] ERROR: Possible command substitution: %s\n' "$CFG" "$lno" "$line"
        continue
    fi

    if ! eval "idx_args=( $line )"; then
        printf >&2 '%s[%d] ERROR: Cannot parse: %s\n' "$CFG" "$lno" "$line"
        continue
    fi
    ((idxCount++))

    if [ -n "${ignExt:-}" ]; then
        case "${idx_args[0]}" in
            *.index.ext) continue ;;
            *.index.ext.$HOSTNAME) continue ;;
        esac
    fi

    if [ -n "${ignHidden:-}" ]; then
        case "${idx_args[0]}" in
            *.index.hidden) continue ;;
            *.index.hidden.$HOSTNAME) continue ;;
        esac
    fi

    case "${idx_args[0]}" in
        *.index?(.ext|.hidden) ) : ;;
        *.index?(.ext|.hidden).host.$HOSTNAME ) : ;;
        *.index?(.ext|.hidden).host.*[A-Z]* )
            printf >&2 '%s[%d] Hostname contains upper case char(s) - ignoring %s\n' "$CFG" "$lno" "${idx_args[0]}"
            continue
            ;;
        *.index?(.ext|.hidden).host.* )
            continue # silently ignore index with other host name
            ;;
        *) printf >&2 '%s[%d] Ignoring invalid index name %s\n' "$CFG" "$lno" "${idx_args[0]}"
            continue
            ;;
    esac

    if [ $# -gt 0 ]; then
        if ! contained "${idx_args[0]}" "$@"; then
            continue
        fi
    fi

    if [ ${#inc_upd[@]} -gt 0  ]; then
        tmpargs=("${idx_args[0]}")
        tmpargs+=( "${inc_upd[@]}")
        tmpargs+=("${idx_args[@]:1}")
        idx_args=("${tmpargs[@]}")
    fi

    echo "Updating ${idx_args[0]}..."
    build_index "${idx_args[@]}"

done < "$CFG"
IFS="$oifs"

if [ "$idxCount" -gt 0 ]; then
    exit 0
else
    echo >&2 "ERROR: No index defined in $CFG"
    exit 1
fi

