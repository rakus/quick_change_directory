# shellcheck shell=bash

export __QC_TEST__=true

set -u

if [ -z "${script_dir:-}" ]; then
    echo ""
    echo "ERROR: required variable \$script_dir\" is not set"
    echo ""
    exit 2
fi



command-v resize >/dev/null 2>&1 && eval "$(resize)"
if [ -n "${COLUMNS:-}" ]; then
    OK_COL=$((COLUMNS-6))
    ERR_COL=$((COLUMNS-9))
    WARN_COL=$((COLUMNS-11))
else
    OK_COL=74
    ERR_COL=71
    WARN_COL=69
fi

if [ -t 1 ]; then
    OK_SUFFIX="\033[${OK_COL}G[\033[01;32mOK\033[0m]"
    ERROR_SUFFIX="\033[${ERR_COL}G[\033[01;31mERROR\033[0m]"
    WARN_SUFFIX="\033[${WARN_COL}G[\033[33mWARNING\033[0m]"
else
    OK_SUFFIX="  --  OK"
    ERROR_SUFFIX="  --  ERROR"
    WARN_SUFFIX="  --  WARNING"
fi

if [ -z "${LINES:-}" ]; then
    export LINES=25
fi


OK()
{
    printf "%b\n" "$OK_SUFFIX"
}

ERROR()
{
    printf "%b\n" "$ERROR_SUFFIX"
    TEST_STATUS=1
}

WARN()
{
    printf "%b\n" "$WARN_SUFFIX"
}

TEST_OBJEKT=
TEST_STATUS=0
startTest()
{
    TEST_OBJEKT="$*"
    echo "------------------------------------------------------------"
    echo "Testing $TEST_OBJEKT"
}

endTest()
{
    echo ""
    echo "------------------------------------------------------------"
    if [ $TEST_STATUS -eq 0 ]; then
        echo "  Test \"$TEST_OBJEKT\" SUCCESSFUL"
    else
        echo "  Test \"$TEST_OBJEKT\" ERROR"
    fi
    echo "------------------------------------------------------------"

    TEST_OBJEKT=

    exit "$TEST_STATUS"
}

skipTest()
{
    echo ""
    echo "------------------------------------------------------------"
    echo "  Test \"$TEST_OBJEKT\" SKIPPED"
    echo "------------------------------------------------------------"
    TEST_OBJEKT=
    exit 0
}

onExit()
{
    rc=$?
    if [ $rc = 0 ]; then
        [ -d "$TEST_DIRECTORY" ] && rm -rf "$TEST_DIRECTORY"
    else
        echo >&2 "Test FAILED"
        echo >&2 "Testdirectory left intact: $TEST_DIRECTORY"
    fi

    if [ -n "$TEST_OBJEKT" ]; then
        echo >&2 ""
        echo >&2 " Something wrong. Missing call of 'endTest'."
        echo >&2 ""
        exit 2
    fi
    exit $rc
}

trap "onExit" EXIT

TEST_DIRECTORY="$script_dir/testDirectory"
[ -d "$TEST_DIRECTORY" ] && rm -rf "$TEST_DIRECTORY"
mkdir -p "$TEST_DIRECTORY/.qc"
export QC_DIR="$TEST_DIRECTORY"/.qc

# IF BUILD_TEST_DIRS is set ....
if [ -n "${BUILD_TEST_DIRS:-}" ]; then

    echo "Setting up Test directory..."

    mkdir -p "$TEST_DIRECTORY/.config/localhost"
    mkdir -p "$TEST_DIRECTORY/.config/testdir"
    mkdir -p "$TEST_DIRECTORY/testdir"
    mkdir -p "$TEST_DIRECTORY/Customer/YoYoDyne/Admin"
    mkdir -p "$TEST_DIRECTORY/Customer/YoYoDyne/docs"
    mkdir -p "$TEST_DIRECTORY/Customer/YoYoDyne/src"
    mkdir -p "$TEST_DIRECTORY/Customer/YoYo/MyProject/Admin"
    mkdir -p "$TEST_DIRECTORY/Customer/ACME/Admin"
    mkdir -p "$TEST_DIRECTORY/A_B"
    mkdir -p "$TEST_DIRECTORY/A.B"

    echo "test.index '$TEST_DIRECTORY' -- '.*'" > "$QC_DIR/qc-index.cfg"
    echo "hidden.index.ext -f '*testDirectory/.*' '$TEST_DIRECTORY'" >> "$QC_DIR/qc-index.cfg"
    cp "$script_dir/../qc-build-index" "$QC_DIR"
    touch "$QC_DIR/test.index"
fi

# shellcheck source=./../quick_change_directory.sh
. "${script_dir}/../quick_change_directory.sh"
export PATH="$script_dir/..:$PATH"

# vim:ft=sh
